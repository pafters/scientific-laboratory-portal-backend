<?php

declare(strict_types=1);

namespace Phosagro\Event\Task;

use Phosagro\Iblocks;
use Phosagro\Manager\Bitrix\UserManager;
use Phosagro\Manager\EventManager;
use Phosagro\Manager\FileManager;
use Phosagro\Object\Participant;
use Phosagro\Object\Task;
use Phosagro\Object\TaskFile;
use Phosagro\Object\TaskFormFieldAnswer;
use Phosagro\Object\TaskFormFieldType;
use Phosagro\Object\TaskType;
use Phosagro\System\UrlManager;

use function Phosagro\get_bitrix_error;

final class Completeoner
{
    public function __construct(
        private readonly EventManager $events,
        private readonly FileManager $files,
        private readonly UrlManager $urls,
        private readonly UserManager $users,
    ) {}

    /**
     * @param TaskFormFieldAnswer[] $answers
     * @param TaskFile[]            $files
     */
    public function completeTask(
        Task $task,
        Participant $participant,
        array $answers = [],
        array $files = [],
    ): void {
        $answersIdentifier = $this->saveAnswers($task, $answers);
        $fileIdentifiers = $this->saveFiles($files);

        $manager = new \CIBlockElement();

        $result = $manager->Add([
            'ACTIVE' => match ($task->taskType) {
                TaskType::FILL_OUT_THE_FORM => 'Y',
                TaskType::VISIT_THE_PLACE => 'Y',
                TaskType::WATCH_THE_VIDEO => 'Y',
                default => 'N',
            },
            'CODE' => sprintf('%d-%d', $task->taskIdentifier, $participant->participantIdentifier),
            'IBLOCK_ID' => Iblocks::completionId(),
            'NAME' => sprintf('%s - %s', $task->taskName, $participant->autogeneratedName),
            'PROPERTY_VALUES' => [
                'ANSWER' => $answersIdentifier,
                'EVENT' => $task->eventIdentifier,
                'FILES' => $fileIdentifiers,
                'PARTICIPANT' => $participant->participantIdentifier,
                'TASK' => $task->taskIdentifier,
            ],
        ]);

        if (!\is_int($result) || ($result <= 0)) {
            throw new \RuntimeException(sprintf('Can not complete task. %s', $manager->LAST_ERROR));
        }

        if (TaskType::UPLOAD_FILE === $task->taskType) {
            $event = $this->events->findEventsByBitrixId($task->eventIdentifier);

            if (null !== $event) {
                $moderator = $this->users->findById($event->moderatorIdentifier);

                if (null !== $moderator) {
                    $adminPath = '/bitrix/admin/iblock_element_edit.php?'.http_build_query([
                        'IBLOCK_ID' => Iblocks::completionId(),
                        'ID' => sprintf('%d', $result),
                        'WF' => 'Y',
                        'find_section_section' => '-1',
                        'lang' => LANG,
                        'type' => 'event',
                    ]);

                    $emailResult = \CEvent::Send('EVENT_TASK_FILES_UPLOAD', 's1', [
                        'ADMIN_URL' => $this->urls->makeAbsolute($adminPath),
                        'EVENT_NAME' => $event->name,
                        'MODERATOR_EMAIL' => $moderator->email,
                        'TASK_NAME' => $task->taskName,
                    ]);

                    if (!$emailResult) {
                        throw new \RuntimeException('Can not send email to the moderator.');
                    }
                }
            }
        }
    }

    /**
     * @param TaskFormFieldAnswer[] $answers
     */
    private function saveAnswers(Task $task, array $answers): ?int
    {
        if (null === $task->formData) {
            if ([] !== $answers) {
                throw new \LogicException('Can not save answers when task has no form.');
            }

            return null;
        }

        $manager = new \CFormResult();

        $values = [];

        foreach ($answers as $answer) {
            $field = $answer->answerField;
            if (TaskFormFieldType::CHECKBOX === $field->fieldType) {
                /** @var array<int,int> $valueIndex */
                $valueIndex = [];
                foreach ($answer->multiChoice as $variant) {
                    $valueIndex[$variant->variantIdentifier] = $variant->variantIdentifier;
                }
                $values[sprintf('form_checkbox_%s', $field->fieldSid)] = array_values($valueIndex);
            } elseif (TaskFormFieldType::NUMBER === $field->fieldType) {
                $values[sprintf('form_text_%d', $field->answerIdentifier)] = sprintf('%F', $answer->numericAnswer);
            } elseif (TaskFormFieldType::RADIO === $field->fieldType) {
                $values[sprintf('form_radio_%s', $field->fieldSid)] = $answer->singleChoice->variantIdentifier;
            } elseif (TaskFormFieldType::TEXT === $field->fieldType) {
                $values[sprintf('form_text_%d', $field->answerIdentifier)] = $answer->textAnswer;
            } else {
                throw new \LogicException(sprintf('Unknown task form field type "%s".', $field->fieldType->name));
            }
        }

        $result = $manager->Add($task->formData->formIdentifier, $values);

        if (!$result) {
            throw new \RuntimeException(sprintf('Can not save answers. %s', get_bitrix_error()));
        }

        return $result;
    }

    /**
     * @param TaskFile[] $fileList
     *
     * @return int[]
     */
    private function saveFiles(array $fileList): array
    {
        /** @var int[] $identifierList */
        $identifierList = [];

        foreach ($fileList as $file) {
            $identifierList[] = $this->files->saveFile($file->content, $file->name, 'task_completion_file');
        }

        return $identifierList;
    }
}
